{
  "version": 3,
  "sources": ["../../../../src/boosters/uniform/UniformBooster.ts"],
  "sourcesContent": ["import {LuckyBooster} from \"../lucky/LuckyBooster\";\nimport {IInventory, ILuckBoosterSettings} from \"../../../src/type\";\nimport {Item} from \"../../Item/Item\";\nimport {nextRarity, prevRarity} from \"../../helpers\";\nimport {ITEMTYPE_NAMES} from \"../../enum\";\n\nexport class UniformBooster extends LuckyBooster {\n    itemsSet = {\n        [ITEMTYPE_NAMES.HELMET]: false, \n        [ITEMTYPE_NAMES.ARMOR]: false, \n        [ITEMTYPE_NAMES.WEAPON]: false, \n        [ITEMTYPE_NAMES.SHIELD]: false  \n    };\n    minimumItems: number = 4;\n\n    constructor(settings: ILuckBoosterSettings) {\n        super(settings);\n\n        if (this.n1 + this.n2 < this.minimumItems) {\n            throw new Error(`UniformBooster requires ${this.minimumItems} items minimum`)\n        }\n    }\n\n    private get haveAllItems() {\n        return Object.values(this.itemsSet).every(v => v); \n    }\n  \n    getBoosterLoot(playerInventory?: IInventory): Item[] {\n        let result = [];\n        if (this.n1) {\n            for (let i = 0; i < this.n1; i++) {\n                const haveReplacement = this.checkReplacementChanceByRarity();\n                const rarity = haveReplacement ? nextRarity[this.rarity] : this.rarity;\n                let type = null;\n                if (!this.haveAllItems) {\n                    Object.entries(this.itemsSet).forEach(([key, value]) => {\n                        if (!value) {\n                            this.itemsSet[key] = true;\n                            type = key;\n                        }\n                    });\n                }\n                const item = this.getRandomItem(rarity, type);\n                result.push(item);\n            }\n        }\n        if (this.n2) {\n            for (let i = 0; i < this.n2; i++) {\n                const haveReplacement = this.checkReplacementChanceByRarity()\n                const rarity = haveReplacement ? nextRarity[this.rarity] : prevRarity[this.rarity];\n                let type = null;\n                if (!this.haveAllItems) {\n                    Object.entries(this.itemsSet).forEach(([key, value]) => {\n                        if (!value) {\n                            this.itemsSet[key] = true;\n                            type = key;\n                        }\n                    });\n                }\n                const item = this.getRandomItem(rarity, type);\n                result.push(item);\n            }\n        }\n        return result;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA2B;AAG3B,qBAAqC;AACrC,kBAA6B;AAEtB,MAAM,uBAAuB,iCAAa;AAAA,EAS7C,YAAY,UAAgC;AACxC,UAAM,QAAQ;AATlB,oBAAW;AAAA,MACP,CAAC,2BAAe,SAAS;AAAA,MACzB,CAAC,2BAAe,QAAQ;AAAA,MACxB,CAAC,2BAAe,SAAS;AAAA,MACzB,CAAC,2BAAe,SAAS;AAAA,IAC7B;AACA,wBAAuB;AAKnB,QAAI,KAAK,KAAK,KAAK,KAAK,KAAK,cAAc;AACvC,YAAM,IAAI,MAAM,2BAA2B,KAAK,4BAA4B;AAAA,IAChF;AAAA,EACJ;AAAA,EAEA,IAAY,eAAe;AACvB,WAAO,OAAO,OAAO,KAAK,QAAQ,EAAE,MAAM,OAAK,CAAC;AAAA,EACpD;AAAA,EAEA,eAAe,iBAAsC;AACjD,QAAI,SAAS,CAAC;AACd,QAAI,KAAK,IAAI;AACT,eAAS,IAAI,GAAG,IAAI,KAAK,IAAI,KAAK;AAC9B,cAAM,kBAAkB,KAAK,+BAA+B;AAC5D,cAAM,SAAS,kBAAkB,0BAAW,KAAK,UAAU,KAAK;AAChE,YAAI,OAAO;AACX,YAAI,CAAC,KAAK,cAAc;AACpB,iBAAO,QAAQ,KAAK,QAAQ,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACpD,gBAAI,CAAC,OAAO;AACR,mBAAK,SAAS,OAAO;AACrB,qBAAO;AAAA,YACX;AAAA,UACJ,CAAC;AAAA,QACL;AACA,cAAM,OAAO,KAAK,cAAc,QAAQ,IAAI;AAC5C,eAAO,KAAK,IAAI;AAAA,MACpB;AAAA,IACJ;AACA,QAAI,KAAK,IAAI;AACT,eAAS,IAAI,GAAG,IAAI,KAAK,IAAI,KAAK;AAC9B,cAAM,kBAAkB,KAAK,+BAA+B;AAC5D,cAAM,SAAS,kBAAkB,0BAAW,KAAK,UAAU,0BAAW,KAAK;AAC3E,YAAI,OAAO;AACX,YAAI,CAAC,KAAK,cAAc;AACpB,iBAAO,QAAQ,KAAK,QAAQ,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACpD,gBAAI,CAAC,OAAO;AACR,mBAAK,SAAS,OAAO;AACrB,qBAAO;AAAA,YACX;AAAA,UACJ,CAAC;AAAA,QACL;AACA,cAAM,OAAO,KAAK,cAAc,QAAQ,IAAI;AAC5C,eAAO,KAAK,IAAI;AAAA,MACpB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
